/* Auto-generated by genmsg_cpp for file /home/erobots/ros/ros_workspace/jaguar/align/msg/align_params.msg */
#ifndef ALIGN_MESSAGE_ALIGN_PARAMS_H
#define ALIGN_MESSAGE_ALIGN_PARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace align
{
template <class ContainerAllocator>
struct align_params_ {
  typedef align_params_<ContainerAllocator> Type;

  align_params_()
  : status(0)
  , go(0)
  , angle(0.0)
  , tolerance(0.0)
  {
  }

  align_params_(const ContainerAllocator& _alloc)
  : status(0)
  , go(0)
  , angle(0.0)
  , tolerance(0.0)
  {
  }

  typedef int32_t _status_type;
  int32_t status;

  typedef int32_t _go_type;
  int32_t go;

  typedef double _angle_type;
  double angle;

  typedef double _tolerance_type;
  double tolerance;


  typedef boost::shared_ptr< ::align::align_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::align::align_params_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct align_params
typedef  ::align::align_params_<std::allocator<void> > align_params;

typedef boost::shared_ptr< ::align::align_params> align_paramsPtr;
typedef boost::shared_ptr< ::align::align_params const> align_paramsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::align::align_params_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::align::align_params_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace align

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::align::align_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::align::align_params_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::align::align_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b268fc20a4adf6788232295e116eea87";
  }

  static const char* value(const  ::align::align_params_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb268fc20a4adf678ULL;
  static const uint64_t static_value2 = 0x8232295e116eea87ULL;
};

template<class ContainerAllocator>
struct DataType< ::align::align_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "align/align_params";
  }

  static const char* value(const  ::align::align_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::align::align_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 status\n\
int32 go\n\
float64 angle\n\
float64 tolerance\n\
";
  }

  static const char* value(const  ::align::align_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::align::align_params_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::align::align_params_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.go);
    stream.next(m.angle);
    stream.next(m.tolerance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct align_params_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::align::align_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::align::align_params_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "go: ";
    Printer<int32_t>::stream(s, indent + "  ", v.go);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ALIGN_MESSAGE_ALIGN_PARAMS_H

